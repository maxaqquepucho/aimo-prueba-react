{"version":3,"sources":["assets/images/binoculars.svg","components/Card.tsx","pages/User.tsx","pages/FindUser.tsx","layout/Navbar.tsx","layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Card","props","className","src","this","user","picture","large","width","alt","name","title","first","last","email","phone","location","street","number","country","state","city","React","Component","User","username","match","params","setState","findUser","userData","results","filter","login","toLowerCase","includes","FindUser","handleBuscarChange","e","value","target","filtered","buscar","filteredList","data","UserData","ImgSeart","type","onChange","map","i","key","to","thumbnail","Navbar","Layout","Fragment","children","App","exact","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7abe1aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/binoculars.0870e4a3.svg\";","import React from 'react'\n\nclass Card extends React.Component<ICardProps, ICardState> {\n\n    constructor(props: ICardProps) {\n        super(props)\n\n        \n    }\n\n    render() {\n        return (\n            <div className=\"card-user\">\n                <div className=\"card-header\">\n                    <img src={this.props.user.picture.large} width=\"150\" alt=\"\" />\n                </div>\n                <div className=\"card-body text-center\">\n                    <h2 className=\"user-name\">\n                        {this.props.user.name.title} {this.props.user.name.first || ''} {this.props.user.name.last || ''}\n                    </h2>\n                    <span className=\"card-email\"> {this.props.user.email}</span> <br />\n                    <span className=\"card-email\"> Celular: {this.props.user.phone}</span>\n                    {/* <div className=\"separador\"></div> */}\n\n                    <p className=\"street\">La dirección de este usuario es <strong>{this.props.user.location.street.name} </strong>\n                        e identficado con el número <strong>{this.props.user.location.street.number}</strong>. \n                        Tener en cuenta que los datos son solo ejemplos.\n                    </p>\n                    <div className=\"separador\"></div>\n\n                    <div className=\"come-from\">\n                        <span> <strong>País: </strong> {this.props.user.location.country}</span>\n                        <span><strong>Estado: </strong>{this.props.user.location.state}</span>\n                        <span><strong>Cuidad: </strong>{this.props.user.location.city}</span>\n                    </div>\n\n                </div>\n                <div className=\"card-footer\">\n\n                </div>\n\n                <div >\n\n                </div>\n\n            </div>\n        )\n    }\n\n}\n\ninterface ICardProps {\n     user: {\n        name: {\n            title: any,\n            first: any,\n            last: any\n\n        },\n        email: any,\n        phone: any,\n        picture: {\n            large: any\n        },\n        location: {\n            street: any,\n            country:any,\n            city: any,\n            state: any,\n        }\n    }\n}\n\ninterface ICardState {\n    \n}\n\nexport default Card;","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport userData from '../data/data.json'\n\nimport '../assets/scss/User.scss'\n\n//components\nimport Card from '../components/Card'\n\nclass User extends React.Component<IUserProps, IUserState> {\n\n    constructor(props: IUserProps) {\n        super(props)\n\n        this.state = {\n            username: this.props.match.params.username,\n            user: {\n                name: {},\n                picture: {},\n                location: {\n                    street: {}\n                }\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            user: this.findUser()[0]\n        })\n    }\n\n    findUser() {\n        return userData.results.filter(user => {\n\n            return user.login.username.toLowerCase().includes(this.state.username.toLowerCase())\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"container p-relative\">               \n                <div className=\"user-container\">\n                    <Card user={this.state.user}  />\n                </div>\n            </div>\n        )\n    }\n}\n\ninterface IUserProps extends RouteComponentProps<{ username: string }> {\n\n}\n\ninterface IUserState {\n    user: any,\n    username: string\n}\n\nexport default User","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport UserData from '../data/data.json'\n//style \nimport '../assets/scss/FindUser.scss'\nimport ImgSeart from '../assets/images/binoculars.svg'\n\n\nclass FindUser extends React.Component<IFindUserProps, IFindUserState> {\n\n\n    constructor(props: IFindUserProps) {\n        super(props)\n\n        this.state = {\n            buscar: '',\n            data: UserData.results,\n            filtered: []\n        }\n    }\n\n    handleBuscarChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { value } = e.target\n\n        if (value === '') {\n            return this.setState({\n                filtered: []\n            })\n        }\n\n        this.setState({\n            buscar: value,\n            filtered: this.filteredList(value)\n        })\n\n\n    }\n\n    filteredList(buscar: string) {\n        return this.state.data.filter(user => {\n            // console.log(article)\n            let title: string = user.name.first + ' ' + user.name.last\n\n            return title.toLowerCase().includes(buscar.toLowerCase())\n        })\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"container find-user-height\">\n                <div className=\"find-user\">\n                    <section className=\"buscador\">\n                        {/* <Link to={ '/user' } >go to user</Link>   */}\n                        <div className=\"text-center\">\n                            <img src={ImgSeart} width=\"20%\" alt=\"binoculares\"/>\n                        </div>\n                        <h3 className=\"text-center \">Buscar Usuarios</h3>\n                        <div className=\"input-group p-relative\">\n                            <input\n                                className=\"input-search\"\n                                type=\"text\"\n                                name=\"buscar\"\n                                onChange={this.handleBuscarChange}\n                            />\n\n                            <div className=\"list-search\">\n                                <ul>\n                                    {\n                                        this.state.filtered.map((user, i) => {\n                                            return (\n                                                <li key={i} >\n                                                    <Link to={`/${user.login.username}`} >\n                                                        <img src={user.picture.thumbnail} width=\"7%\" alt=\"user_image\" />\n                                                        <div className=\"user-name\" >{user.name.first} {user.name.last}</div>\n\n                                                    </Link>\n\n                                                </li>\n                                            )\n                                        })\n                                    }\n\n                                </ul>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </div>\n\n        )\n\n    }\n\n}\n\ninterface IFindUserProps {\n\n}\n\n\ninterface IFindUserState {\n    buscar: string,\n    data: any[],\n    filtered: any[]\n}\n\nexport default FindUser","import React from 'react'\nimport { Link } from 'react-router-dom'\n\n//styles\nimport '../assets/scss/Navbar.scss'\n\nclass Navbar extends React.Component {\n    render() {\n        return (\n            <div className=\"navbar-container\">\n                <div className=\"logo\">\n                    Personas\n                </div>\n\n                <div className=\"btn-to-search\">\n                    <Link className=\"btn\" to={ '/' } >Ir a buscar</Link>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Navbar","import React from 'react';\n\nimport Nanbar from './Navbar'\n\n\nconst Layout: React.FC = (props: any) => {\n  return (\n      <React.Fragment>\n          <Nanbar />\n          { props.children }\n         \n      </React.Fragment>\n  )\n}\n\nexport default Layout;\n","import React from 'react';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\n// pages\nimport User from './pages/User'\nimport FindUser from './pages/FindUser'\n\n//layout\nimport Layout from './layout/Layout'\n\n\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Layout>\n          <Switch>\n            <Route exact path='/' component={FindUser} ></Route>\n            <Route exact path='/:username' component={User} ></Route>\n          </Switch>\n        </Layout>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './assets/scss/app.scss'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}